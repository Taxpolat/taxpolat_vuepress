(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{599:function(e,t,n){"use strict";n.r(t);var a=n(8),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"javascript高程学习"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript高程学习"}},[e._v("#")]),e._v(" JavaScript高程学习")]),e._v(" "),n("hr"),e._v(" "),n("h2",{attrs:{id:"_1-数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据类型"}},[e._v("#")]),e._v(" 1.数据类型")]),e._v(" "),n("p",[e._v("分为两大类型：基本类型和引用类型")]),e._v(" "),n("p",[e._v("JavaScript"),n("code",[e._v("基本数据类型")]),e._v("可分为7大类型：")]),e._v(" "),n("ul",[n("li",[e._v("undefined")]),e._v(" "),n("li",[e._v("Null")]),e._v(" "),n("li",[e._v("String")]),e._v(" "),n("li",[e._v("Number")]),e._v(" "),n("li",[e._v("Boolean")]),e._v(" "),n("li",[e._v("Symbol")]),e._v(" "),n("li",[e._v("biginit"),n("br"),e._v("\n其中symbol和biginit为ES6新增的数据类型；")])]),e._v(" "),n("p",[n("code",[e._v("Symbol")]),e._v(" 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。"),n("br"),e._v(" "),n("code",[e._v("BigInt")]),e._v(" 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围")]),e._v(" "),n("p",[e._v("JavaScript"),n("code",[e._v("引用数据类型")]),e._v(":"),n("br"),e._v("\n引用数据类型指的是有多个值构成的对象，如:")]),e._v(" "),n("ul",[n("li",[e._v("数组，")]),e._v(" "),n("li",[e._v("对象")]),e._v(" "),n("li",[e._v("函数")])]),e._v(" "),n("h4",{attrs:{id:"undefined-类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#undefined-类型"}},[e._v("#")]),e._v(" Undefined 类型")]),e._v(" "),n("p",[n("code",[e._v("undefined")]),e._v("类型只有一个特殊值，就是特殊值undefined。"),n("br"),e._v("\n使用"),n("code",[e._v("var")]),e._v("和"),n("code",[e._v("let")]),e._v("声明变量但没有初始化时，相当于给变量赋值了undefined。\n默认情况下， 任何没有被初始化的变量都会取得undefined值")]),e._v(" "),n("p",[n("em",[n("strong",[e._v("undefined是个假值")])])]),e._v(" "),n("h4",{attrs:{id:"null-类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#null-类型"}},[e._v("#")]),e._v(" null 类型")]),e._v(" "),n("p",[n("code",[e._v("Null")]),e._v("类型同样只有一个值，即特殊值 null。逻辑上讲，null 值表示一个空对象指针，这也是给"),n("code",[e._v("typeof")]),e._v(' 传一个 null 会返回"object"的原因。\n任何时候，只要变量要保存对象，而当时又没有那个\n对象可保存，就要用 null 来填充该变量')]),e._v(" "),n("p",[n("em",[n("strong",[e._v("null是个假值")])])]),e._v(" "),n("h4",{attrs:{id:"null和undefined区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#null和undefined区别"}},[e._v("#")]),e._v(" null和undefined区别")]),e._v(" "),n("p",[e._v("首先"),n("code",[e._v("null")]),e._v("和"),n("code",[e._v("undefined")]),e._v("都是基本数据类型，都分别只有一个值，就是undefined和null")]),e._v(" "),n("p",[e._v("undefined代表的含义是未定义，null代表的含义是空对象。"),n("br"),e._v("\n一般变量声明了还未初始化的的时候就会返回"),n("code",[e._v("undefined")]),e._v("。"),n("br"),e._v("\nnull主要用于赋值给一些可能返回的对象的变量，作为初始化值。")]),e._v(" "),n("h4",{attrs:{id:"boolean-类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#boolean-类型"}},[e._v("#")]),e._v(" Boolean 类型")]),e._v(" "),n("p",[n("code",[e._v("Boolean（布尔值）")]),e._v("类型jJavaScript中使用最频繁的类型之一，只有两个字面值："),n("code",[e._v("true （1）")]),e._v("和 "),n("code",[e._v("false（0）")])]),e._v(" "),n("h5",{attrs:{id:"其他变量转成boolean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他变量转成boolean"}},[e._v("#")]),e._v(" 其他变量转成Boolean")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[e._v("数据类型")]),e._v(" "),n("th",{staticStyle:{"text-align":"center"}},[e._v("转为true值")]),e._v(" "),n("th",{staticStyle:{"text-align":"center"}},[e._v("转为false值")])])]),e._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[e._v("Boolean")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("true")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("false")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[e._v("String")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("非空字符串")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v('""（空字符串）')])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[e._v("Number")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("非零数值（包括无穷值）")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("0、NaN（参见后面的相关内容）")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[e._v("Object")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("任意对象")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("null")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[e._v("Undefined")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("N/A（不存在）")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("undefined")])])])]),e._v(" "),n("h3",{attrs:{id:"number类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#number类型"}},[e._v("#")]),e._v(" Number类型")]),e._v(" "),n("p",[e._v("表示数值的数据类型， 表示整数和浮点值"),n("br"),e._v(" "),n("strong",[e._v("0.1 加 0.2 得到的不是 0.3，而是 0.300 000 000 000 000 04，两个数值分别是 0.05和 0.25，或者 0.15 和 0.15，那没问题")])]),e._v(" "),n("p",[e._v("由于内存的限制，ECMAScript 并不支持表示这个世界上的所有数值")]),e._v(" "),n("p",[e._v("CMAScript 可以表示的最小数值保存在"),n("code",[e._v("Number.MIN_VALUE")]),e._v(" 中，这个值在多数浏览器中是"),n("code",[e._v("5e-324")]),e._v("；可以表示的最大数值保存在"),n("code",[e._v("Number.MAX_VALUE")]),e._v(" 中，这个值在多数浏览器中是 "),n("code",[e._v("1.797 693 134 862 315 7e+308")]),e._v("。如果某个计算得到的数值结果超出了 JavaScript 可以表示的范围，那么这个数值会被自动转换为一个特殊的 "),n("code",[e._v("Infinity")]),e._v("（无穷）值。任何无法表示的负数以"),n("code",[e._v("-Infinity（负无穷大）")]),e._v("表示，任何无法表示的正数以 "),n("code",[e._v("Infinity（正无穷大）")]),e._v("表示。")]),e._v(" "),n("h4",{attrs:{id:"nan"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nan"}},[e._v("#")]),e._v(" NaN")]),e._v(" "),n("p",[e._v("是一个特殊值，表述"),n("code",[e._v("不是数值（not a number）")]),e._v("用于表示本来要返回数值的操作失败了（而不是抛出错误）")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(0/0); // NaN\nconsole.log(-0/+0); // NaN\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[n("strong",[e._v("NaN 不等于包括 NaN 在内的任何值")])]),e._v(" "),n("p",[e._v("提供了isNaN()函数，用于判断这个参数是否"),n("code",[e._v("是不是数值")]),e._v(", 该函数会尝试把它转换为数值")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('console.log(isNaN(NaN)); // true\nconsole.log(isNaN(10)); // false，10 是数值\nconsole.log(isNaN("10")); // false，可以转换为数值 10\nconsole.log(isNaN("blue")); // true，不可以转换为数值\nconsole.log(isNaN(true)); // false，可以转换为数值 1\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("其他的值到数字值的转换：")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("Boolean")]),e._v("类型转换数字： "),n("code",[e._v("true转换为1")]),e._v(" "),n("code",[e._v("false转换为0")])]),e._v(" "),n("li",[n("code",[e._v("undefined")]),e._v("转换成数字会转换为"),n("code",[e._v("NaN")])]),e._v(" "),n("li",[n("code",[e._v("null")]),e._v("转换为数字会转换成"),n("code",[e._v("0")])]),e._v(" "),n("li",[n("code",[e._v("string")]),e._v("类型转换如同使用"),n("code",[e._v("Number()")]),e._v("函数进行转换，如果包含非数字则转换成"),n("code",[e._v("NaN")]),e._v("，空字符串转换成"),n("code",[e._v("0")])]),e._v(" "),n("li",[n("code",[e._v("Symbol")]),e._v("不能转换成数字，会报错")]),e._v(" "),n("li",[e._v("对象，调用"),n("code",[e._v("valueOf()")]),e._v("方法，并按照上述规则转换返回的值")])]),e._v(" "),n("h5",{attrs:{id:"数字转换方法-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数字转换方法-函数"}},[e._v("#")]),e._v(" 数字转换方法（函数）")]),e._v(" "),n("ul",[n("li",[e._v("Number()")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('let num1 = Number("Hello world!"); // NaN\nlet num2 = Number(""); // 0\nlet num3 = Number("000011"); // 11\nlet num4 = Number(true); // 1\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("ul",[n("li",[e._v("parseInt()")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('let num1 = parseInt("1234blue"); // 1234\nlet num2 = parseInt(""); // NaN\nlet num3 = parseInt("0xA"); // 10，解释为十六进制整数\nlet num4 = parseInt(22.5); // 22\nlet num5 = parseInt("70"); // 70，解释为十进制值\nlet num6 = parseInt("0xf"); // 15，解释为十六进制整数\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("ul",[n("li",[e._v("parseFloat() (最推荐使用的)")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('let num1 = parseFloat("1234blue"); // 1234，按整数解析\nlet num2 = parseFloat("0xA"); // 0\nlet num3 = parseFloat("22.5"); // 22.5\nlet num4 = parseFloat("22.34.5"); // 22.34\nlet num5 = parseFloat("0908.5"); // 908.5\nlet num6 = parseFloat("3.125e7"); // 31250000\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("h3",{attrs:{id:"string-类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#string-类型"}},[e._v("#")]),e._v(" String 类型")]),e._v(" "),n("p",[n("strong",[e._v("中的字符串是不可变的（immutable）")]),e._v(" 意思是一旦创建，它们的值就不能变了。要修改\n某个变量中的字符串值，必须先销毁原始的字符串 。"),n("br"),e._v("\n调用"),n("code",[e._v("toString()")]),e._v("方法， 返回当前值的字符串等价物"),n("br"),e._v(" "),n("strong",[e._v("除了null 和 undefined以外的数据类型都有"),n("code",[e._v("toString()")]),e._v("方法")])]),e._v(" "),n("p",[e._v("如果你不确定一个值是不是 null 或 undefined，可以使用 "),n("code",[e._v("String()")]),e._v(" 转型函数")]),e._v(" "),n("ul",[n("li",[e._v("如果值有 toString()方法，则调用该方法（不传参数）并返回结果。")]),e._v(" "),n("li",[e._v('如果值是 null，返回"null"。')]),e._v(" "),n("li",[e._v('如果值是 undefined，返回"undefined"。')])]),e._v(" "),n("h3",{attrs:{id:"symbol-类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#symbol-类型"}},[e._v("#")]),e._v(" Symbol 类型")]),e._v(" "),n("p",[n("code",[e._v("Symbol")]),e._v("（符号）是 ES6 新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险")]),e._v(" "),n("p",[e._v("需要使用 Symbol()函数初始化")]),e._v(" "),n("h3",{attrs:{id:"object类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object类型"}},[e._v("#")]),e._v(" object类型")]),e._v(" "),n("p",[n("code",[e._v("一组数据和功能的集合")]),e._v(" "),n("strong",[e._v("对象通过 new 操作符后跟对象类型的名称来创建,开发者可以通过创建 Object 类型的实例来创建自己的对象，然后再给对象添加属性和方法")])]),e._v(" "),n("p",[e._v("Object 实例都有如下属性和方法:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("constructor")]),e._v(":用于创建当前对象的函数。这个属性的值就是 Object()函数")]),e._v(" "),n("li",[n("code",[e._v("hasOwnProperty(propertyName)")]),e._v(": 用于判断当前对象实例（不是原型）上是否存在给定的属性(propertyName)")]),e._v(" "),n("li",[n("code",[e._v("isPrototypeOf(object)")]),e._v(": 用于判断当前对象是否为另一个对象的原型")]),e._v(" "),n("li",[n("code",[e._v("propertyIsEnumerable(propertyName)")]),e._v(":用于判断给定的属性(propertyName)是否可以使用for-in 语句枚举。与 hasOwnProperty()一样，属性名必须是字符串")]),e._v(" "),n("li",[n("code",[e._v("toLocaleString()")]),e._v(":返回对象的字符串表示，该字符串反映对象所在的本地化执行环境")]),e._v(" "),n("li",[n("code",[e._v("toString()")]),e._v(": 返回对象的字符串表示。")]),e._v(" "),n("li",[n("code",[e._v("valueOf()")]),e._v("：返回对象对应的字符串、数值或布尔值表示。通常与 "),n("code",[e._v("toString()")]),e._v("的返回值相同。")])]),e._v(" "),n("h2",{attrs:{id:"_2-操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-操作符"}},[e._v("#")]),e._v(" 2. 操作符")]),e._v(" "),n("h3",{attrs:{id:"一元操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一元操作符"}},[e._v("#")]),e._v(" 一元操作符")]),e._v(" "),n("p",[e._v("只操作一个值的操作符叫一元操作符")]),e._v(" "),n("h4",{attrs:{id:"递增-递减操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#递增-递减操作符"}},[e._v("#")]),e._v(" 递增/递减操作符")]),e._v(" "),n("p",[e._v("前缀递增操作符会给数值加 1")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let age = 29;\n++age;\n// 相当于\nlet age = 29;\nage = age + 1;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("前缀递减操作符也类似，只不过是从一个数值减 1"),n("br"),e._v(" "),n("strong",[e._v("使用前缀递增还是前缀递减操作符，变量的值都会在语句被求值之前改变")]),e._v("、")]),e._v(" "),n("h4",{attrs:{id:"一元加和减"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一元加和减"}},[e._v("#")]),e._v(" 一元加和减")]),e._v(" "),n("ul",[n("li",[e._v("[x] 一元加由一个加号（+）表示，放在变量前头，"),n("strong",[e._v("对数值没有任何影响")])])]),e._v(" "),n("p",[n("strong",[e._v("如果将一元加应用到非数值，则会执行与使用 Number()转型函数一样的类型转换")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('let s1 = "01";\nlet s2 = "1.1";\nlet s3 = "z";\nlet b = false;\nlet f = 1.1;\nlet o = {\nvalueOf() {\nreturn -1;\n}\n};\ns1 = +s1; // 值变成数值 1\ns2 = +s2; // 值变成数值 1.1\ns3 = +s3; // 值变成 NaN\nb = +b; // 值变成数值 0\nf = +f; // 不变，还是 1.1\no = +o; // 值变成数值-1\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br")])]),n("p",[e._v("一元减由一个减号（-）表示，放在变量前头，主要用于把数值变成负值，如把 1 转换为-1")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let num = 25;\nnum = -num;\nconsole.log(num); // -25\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[n("strong",[e._v("对数值使用一元减会将其变成相应的负值")]),e._v("（如上面的例子所示）。在应用到非数时，一元减会遵循与一元加同样的规则，先对它们进行转换，然后再取负值:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('let s1 = "01";\nlet s2 = "1.1";\nlet s3 = "z";\nlet b = false;\nlet f = 1.1;\nlet o = {\nvalueOf() {\nreturn -1;\n}\n};\ns1 = -s1; // 值变成数值-1\ns2 = -s2; // 值变成数值-1.1\ns3 = -s3; // 值变成 NaN\nb = -b; // 值变成数值 0\nf = -f; // 变成-1.1\no = -o; // 值变成数值 1\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br")])]),n("h3",{attrs:{id:"布尔操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#布尔操作符"}},[e._v("#")]),e._v(" 布尔操作符")]),e._v(" "),n("p",[e._v("布尔操作符一共有 3 个： "),n("kbd",[e._v("逻辑非")]),e._v("、"),n("kbd",[e._v("逻辑与")]),e._v(" "),n("kbd",[e._v("逻辑或")])]),e._v(" "),n("h5",{attrs:{id:"逻辑非"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#逻辑非"}},[e._v("#")]),e._v(" 逻辑非")]),e._v(" "),n("p",[e._v("逻辑非操作符由一个叹号（!）表示。"),n("br"),e._v("\n无论用到什么类型的值，逻辑非操作符始终会返回布尔值，然后再对返回的布尔值取反。"),n("br"),e._v("\n逻辑非操作符规则:")]),e._v(" "),n("ul",[n("li",[e._v("如果操作数是对象，则返回 false")]),e._v(" "),n("li",[e._v("如果操作数是空字符串，则返回 true")]),e._v(" "),n("li",[e._v("如果操作数是非空字符串，则返回 false")]),e._v(" "),n("li",[e._v("如果操作数是数值 0，则返回 true")]),e._v(" "),n("li",[e._v("如果操作数是非 0 数值（包括 Infinity），则返回 false。")]),e._v(" "),n("li",[e._v("如果操作数是 null，则返回 true")]),e._v(" "),n("li",[e._v("如果操作数是 NaN，则返回 true")]),e._v(" "),n("li",[e._v("如果操作数是 undefined，则返回 true")]),e._v(" "),n("li")]),e._v(" "),n("ul",[n("li",[e._v("[x] 逻辑非操作符也可以用于把任意值转换为布尔值。同时使用两个叹号（!!），相当于调用了转型函数 Boolean()")])]),e._v(" "),n("h5",{attrs:{id:"逻辑与"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#逻辑与"}},[e._v("#")]),e._v(" 逻辑与")]),e._v(" "),n("p",[e._v("逻辑与操作符由两个和号（&&）表示，应用到两个值， 规则如下:")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[e._v("第一个操作数")]),e._v(" "),n("th",{staticStyle:{"text-align":"center"}},[e._v("第二个操作数")]),e._v(" "),n("th",{staticStyle:{"text-align":"center"}},[e._v("结 果")])])]),e._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[e._v("true")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("true")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("true")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[e._v("true")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("false")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("false")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[e._v("false")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("true")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("false")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[e._v("false")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("false")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("false")])])])]),e._v(" "),n("h5",{attrs:{id:"逻辑或"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#逻辑或"}},[e._v("#")]),e._v(" 逻辑或")]),e._v(" "),n("p",[e._v("2.数据类型检测方式有哪些：\n（1）typeof\n作用： 确定任意变量的数据类型\n是一个操作符，不是函数，所以不需要参数，但是也可以接受参数")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(typeof 2);               // number\nconsole.log(typeof true);            // boolean\nconsole.log(typeof 'str');           // string\nconsole.log(typeof []);              // object    \nconsole.log(typeof function(){});    // function\nconsole.log(typeof {});              // object\nconsole.log(typeof undefined);       // undefined\nconsole.log(typeof null);            // object \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("其中数组，对象，null的数据类型都会被判断为 object，其他判断都为正确，因此不能所有的数据类型都能用此方式。")]),e._v(" "),n("p",[e._v("（2）instanceof（实例）\n原理是 判断在数据类型的原型链中能否找到该类型的原型\nconsole.log(2 instanceof Number);                    // false\nconsole.log(true instanceof Boolean);                // false\nconsole.log('str' instanceof String);                // false")]),e._v(" "),n("p",[e._v("console.log([] instanceof Array);                    // true\nconsole.log(function(){} instanceof Function);       // true\nconsole.log({} instanceof Object);                   // true")]),e._v(" "),n("p",[e._v("可以看到instanceof 只能正确的判断引用数据类型，不能判断基本数据类型。\ninstanceof运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的prototype。")]),e._v(" "),n("p",[e._v("（3）constructor（构造函数）\nconsole.log((2).constructor === Number); // true\nconsole.log((true).constructor === Boolean); // true\nconsole.log(('str').constructor === String); // true\nconsole.log(([]).constructor === Array); // true\nconsole.log((function() {}).constructor === Function); // true\nconsole.log(({}).constructor === Object); // true\nconstructor有两个左右，一是判断数据的类型，二是对象的实例通过constructor对象访问它的构造函数。如果创建一个对象来改变的它的原型，constructor就不能用来判断数据类型了；")]),e._v(" "),n("p",[e._v("（4）Object.prototype.toString.call ()\nObject.prototype.toString.call() 使用Object对象的原型方法toString来判断数据类型：\nvar a = Object.prototype.toString;")]),e._v(" "),n("p",[e._v("console.log(a.call(2));\nconsole.log(a.call(true));\nconsole.log(a.call('str'));\nconsole.log(a.call([]));\nconsole.log(a.call(function(){}));\nconsole.log(a.call({}));\nconsole.log(a.call(undefined));\nconsole.log(a.call(null));")]),e._v(" "),n("p",[e._v("3.数组检测方式有哪些\n(1)Object.prototype.toString来判断\nObject.prototype.toString.call(obj) // [object Array]\nObject.prototype.toString.call(obj).slice(8,-1) === 'Array';")]),e._v(" "),n("p",[e._v("(2) 通过原型链判断\nconsole.log(obj."),n("strong",[e._v("proto")]),e._v(" === Array.prototype) // true为数组  else 不是 数组")]),e._v(" "),n("p",[e._v("（3）通过ES6的Array.isArray()做判断：\nArray.isArrray(obj);")]),e._v(" "),n("p",[e._v("（4）instanceof\nconsole.log([] instanceof Array);                    // true")]),e._v(" "),n("p",[e._v("（5）通过Array.prototype.isPrototypeOf\nArray.prototype.isPrototypeOf(obj)  // true")]),e._v(" "),n("p",[e._v("4.NaN 类型\nNaN是个特殊类型，是指“不是一个数字”（not a number）是一个警戒值，用于指出数字类型中的错误情况，它和自身不相等，是唯一一个非自反的值（自反，reflexive，即 x === x 不成立）。\n而 NaN !== NaN 为 true。\ntypeof NaN; // \"number\"\nisNaN和 Number.isNaN函数的区别：\nlet num = 1\nlet str = 'hello';\nlet chu = 1 / str")]),e._v(" "),n("p",[e._v("console.log(isNaN(num))  // false\nconsole.log(isNaN(str))  // true\nconsole.log(isNaN(chu))  // true")]),e._v(" "),n("p",[e._v("console.log(Number.isNaN(num))  // false\nconsole.log(Number.isNaN(str))  // false\nconsole.log(Number.isNaN(chu))  // true\n（1）函数isNaN接受参数后，会尝试将参数转换成数值，任何不能转换为数值的值都会返回NaN，因此传入的参数不是数值也会返回true，会影响判断的结果\n（2）Number.isNaN会首先判断参数是不是数字，如果是数再继续判断是否为NaN，不会进行数据类型的转换，这种方法更为准确。")]),e._v(" "),n("p",[e._v("5.其他值到字符串的转换规则：\n（1）null ==> 'null'\n（2）undefined ==> ‘undefined'\n（3）Boolean类型： true==> ‘true'    false  ==> ‘false '\n（4）Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。\n（5）对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()。（Object.prototype.toString()）来返回内部属性 [[Class]] 的值，如\"[object Object]\"。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值。")]),e._v(" "),n("p",[e._v("6.其他的值到数字值的转换：\n（1）undefined转换成数字会转换为NaN\n（2）null转换为数字会转换成0\n（3）Boolean类型转换数字： true转换为1 false转换为0\n（4）string类型转换如同使用Number()函数进行转换，如果包含非数字则转换成NaN，空字符串转换成0\n（5）Symbol不能转换成数字，会报错")]),e._v(" "),n("p",[e._v("7.其他值到布尔值")]),e._v(" "),n("p",[e._v('JavaScript假值有：\nundefined \nnull \nfalse\n+0\n-0\nNaN\n ""（空字符串）\n假值的布尔强制类型为转换结果为false。逻辑上 假值列表意外的都是真值，布尔强制类型转换结果为true')]),e._v(" "),n("p",[e._v("8.Object.is() 与比较操作符’==‘， ’===‘的区别\n（1）使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。\n（2）使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。\n（3）使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。")]),e._v(" "),n("p",[e._v("9.隐式类型转换\nJavaScript 中的隐式类型转换主要发生在+、-、*、/以及==、>、<这些运算符之间\n（1）+操作符\n+操作符两边至少有一个Sting类型变量时，两边的变量都会被隐式转换为字符串，操作便成为两个字符相加操作。\n其他的情况都会隐式转换为数字进行数字相加运算。\n1 + '23' // '123'\n1 + false // 1\n1 + Symbol() // Uncaught TypeError: Cannot convert a Symbol value to a number\n'1' + false // '1false'\nfalse + true // 1")]),e._v(" "),n("p",[e._v("（2）-、*、\\操作符\n1 * '23' // 23\n1 * false // 0\n1 / 'aa' // NaN")]),e._v(" "),n("p",[e._v("（3）==操作符\n==操作符两边的值都尽可能的转成number\n3 == true // false, 3 转为number为3，true转为number为1\n'0' == false //true, '0'转为number为0，false转为number为0\n'0' == 0 // '0'转为number为0")]),e._v(" "),n("p",[e._v("（4）>、< 操作符\n如果操作符的两边都是字符串，则比较字母表顺序：\n'ca' < 'bd' // false\n'a' < 'b' // true\n其他情况下都会转换成数字再比较\n'12' < 13 // true\nfalse > -1 // true")]),e._v(" "),n("ol",[n("li",[e._v("let， const, var 的区别\nlet 声明的范围是块作用域，而 var 声明的范围是函数作用域\nif (true) {\nvar name = 'Matt';\nconsole.log(name); // Matt\n}\nconsole.log(name); // Matt")])]),e._v(" "),n("p",[e._v("if (true) {\nlet age = 26;\nconsole.log(age); // 26\n}\nconsole.log(age); // ReferenceError: age 没有定义\n（1）块级作用域不一样：\n块级作用域有{ }包括，let和const 是有块级作用域，var不存在块级作用域\n（2）变量提升：（函数及变量的声明都将被提升到函数的最顶部）\nvar 存在变量提升，let和const不存在变量提升，即变量只能在声明之后使用，否则会报错\n（3）重复声明：var声明变量时可以重复声明，后声明的同名变量会覆盖之前声明的变量。\nlet和const不能重复声明\n（4）暂时性死区：在使用let和const命令声明之前该变量都是不可用的，这称为暂时性死区。使用var声明不存在暂时性死区。\n（5）初始值设置：用let和var声明变量时可以不设置初始值，使用const声明变量时必须设置初始值，不然会报错\n（6）指针指向：let创建的变量是可以更改指针的指向的（可以重新赋值）。但const声明的变量是不允许改变指针的指向")]),e._v(" "),n("p",[e._v("区别是否有块级作用域是否存在变量提升是否添加全局属性能否重复声明变量是否存在暂时性死区是否必须设置初始值能否改变指针指向var×✔️✔️✔️××✔️let✔️×××✔️×✔️const✔️×××✔️✔️×")]),e._v(" "),n("p",[e._v("11.能不能修改用const声明的对象的属性？\n可以改！\nconst保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动\n对于基本类型的数据（数值，字符串，布尔值），其值就保存在变量指向的内存地址，等同于常量")]),e._v(" "),n("p",[e._v("但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址保存的只是一个指针，const只能保证这个指针固定不变，至于它指向的数据结构是不是可变的，就完全不受const的控制了")]),e._v(" "),n("p",[e._v("12.箭头函数和普通函数的区别\n（1）箭头函数比普通函数更加简洁\n（2）箭头函数没有自己的this，箭头函数不会创建自己的this，只会在自己的作用域的上一层继承this，因此箭头函数的中this在它定义的时候就已经确定了，之后不会改变，即箭头函数继承来的this指向永远不会改变。\n（3）call(),apply(),bind()等方法不能改变箭头函数的 this指向\n（4）箭头函数不能作为构造函数使用\n（5）箭头函数没有自己的arguments对象")]),e._v(" "),n("ol",{attrs:{start:"13"}},[n("li",[e._v("箭头函数的this指向哪里？\n箭头函数不会创建自己的this，只会在自己的作用域的上一层继承this，因此箭头函数的中this在它定义的时候就已经确定了，之后不会改变，即箭头函数继承来的this指向永远不会改变。\n它所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的this，所以是不会被new调⽤的，这个所谓的this也不会被改变。")])]),e._v(" "),n("p",[e._v("14.如果new一个箭头函数会怎么样？\n箭头函数是ES6中提出来的，它没有prototype，也没有自己的this，更不可以使用arguments参数，所以不能new一个箭头函数")]),e._v(" "),n("ol",{attrs:{start:"15"}},[n("li",[e._v("new操作的实现步骤：\n1.创建一个对象\n2.将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的prototype属性）\n3.指向构造函数中的代码，构造函数中的this指向该对象（也就是为这个对象添加属性和方法）\n4.返回新对象")])]),e._v(" "),n("p",[e._v("16.js防抖\n在事件被触发n秒后再执行回调函数，如果在这n秒内又被触发，则重新计时。\nfunction debounce(fun, delay) {\nreturn function (args) {\nlet that = this\nlet _args = args\nclearTimeout(fun.id)\nfun.id = setTimeout(function () {\nfun.call(that, _args)\n}, delay)\n}\n}\n17.节流\n规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效\nfunction throttle(fun, delay) {\nlet last, deferTimer\nreturn function (args) {\nlet that = this\nlet _args = arguments\nlet now = +new Date()\nif (last && now < last + delay) {\nclearTimeout(deferTimer)\ndeferTimer = setTimeout(function () {\nlast = now\nfun.apply(that, _args)\n}, delay)\n}else {\nlast = now\nfun.apply(that,_args)\n}\n}\n}\nVue问题\n1.对vue的理解\n用于动态创建用户界面的渐进式JavaScript框架。\nvue特点：MVVM模式；代码简洁，运行效率高，适合移动端开发，易入门\n2.MVVM模式\n全程 model-view-viewModel，Model表示数据层，view表示视图层，viewModel 是view和model层的桥梁")]),e._v(" "),n("p",[e._v("3.vue生命周期\n（1）beforeCreate\n组件刚被创建，组件属性计算之前，data computed watch methods上的方法和数据均不能访问\n（2）created\n组件实例创建完成，属性已绑定，能拿到data，挂载阶段还未开始，DOM还未生成，data computed watch methods上的方法和数据均能访问，可进行一些接口的请求\n（3）beforeMount\n模板编译，挂载之前，相关render函数首次被调用。\n（4）mounted\n模板编译，挂载\n（5）beforeUpdate\n组件更新之前\n（6）updated\n组件更新之后\n（7）beforeDestroy\n组件实力销毁之前被调用\n（8）destroyed\nvm.$detroy()被调用，组件生命周期结束。")]),e._v(" "),n("p",[e._v("4.请求初始化是要放在created或者mounted？\ncreated，个人习惯，已经可以拿到data，可以进行一个页面数据的初始化了，看个人习惯。")]),e._v(" "),n("p",[e._v("5.vue中data为什么是函数？\ndata为函数（有自己独立的作用域），通过return 返回对象的拷贝，致使每个实例都有自己独立的对象，实例之间可以互不影响的改变data属性值。")]),e._v(" "),n("p",[e._v("6.vue和react的区别\nvue是双向数据流，vue是双向绑定， react是单向\nvue 是响应式，数据变动界面也会自动更新，react需要手动调用setstate的方法\nvue 有虚拟dom react 没有虚拟dom\nvue 模板+js+css  react 函数式变成 使用jsx， all in js\nvuex是使用可变的数据，可以直接修改数据， react用的是不可变的数据，修改时智能用新的state替换旧的state")])])}),[],!1,null,null,null);t.default=s.exports}}]);